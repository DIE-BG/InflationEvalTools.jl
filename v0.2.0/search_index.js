var documenterSearchIndex = {"docs":
[{"location":"#InflationEvalTools","page":"Home","title":"InflationEvalTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for InflationEvalTools.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#InflationEvalTools.InflationEvalTools","page":"Home","title":"InflationEvalTools.InflationEvalTools","text":"InflationEvalTools\n\nTipos, funciones y demás utilidades de simulación para evaluación de medidas inflación.\n\n\n\n\n\n","category":"module"},{"location":"#InflationEvalTools.DEFAULT_SEED","page":"Home","title":"InflationEvalTools.DEFAULT_SEED","text":"const DEFAULT_SEED\n\nSemilla por defecto utilizada para el proceso de simulación y la reproducibilidad de los resultados.\n\n\n\n\n\n","category":"constant"},{"location":"#InflationEvalTools.GT_EVAL_B00","page":"Home","title":"InflationEvalTools.GT_EVAL_B00","text":"const GT_EVAL_B00 = EvalPeriod(Date(2001, 12), Date(2010, 12), \"gt_b00\")\n\nPeríodo por defecto para evaluación en la década de los años 2000, incluyendo el año 2010. \n\n\n\n\n\n","category":"constant"},{"location":"#InflationEvalTools.GT_EVAL_B10","page":"Home","title":"InflationEvalTools.GT_EVAL_B10","text":"const GT_EVAL_B10 = EvalPeriod(Date(2011, 12), Date(2021, 12), \"gt_b10\")\n\nPeríodo por defecto para evaluación en la década de los años 2010, incluyendo el año 2021.\n\n\n\n\n\n","category":"constant"},{"location":"#InflationEvalTools.GT_EVAL_T0010","page":"Home","title":"InflationEvalTools.GT_EVAL_T0010","text":"const GT_EVAL_T0010 = EvalPeriod(Date(2011, 1), Date(2011, 11), \"gt_t0010\")\n\nPeríodo por defecto para evaluación en la transición de la década de los años 2000 a 2010. \n\n\n\n\n\n","category":"constant"},{"location":"#InflationEvalTools.LOCAL_RNG","page":"Home","title":"InflationEvalTools.LOCAL_RNG","text":"const LOCAL_RNG = StableRNG(0)\n\nEsta constante se utiliza para fijar el generador de números aleatorios en cada proceso local, utilizando el generador StableRNG con semilla inicial cero. La semilla será alterada en cada iteración del proceso de simulación. Esto garantiza la reproducibilidad de los resultados por realización de remuestreo escogiendo la constante DEFAULT_SEED. \n\n\n\n\n\n","category":"constant"},{"location":"#InflationEvalTools.RWTREND","page":"Home","title":"InflationEvalTools.RWTREND","text":"RWTREND\n\nTrayectoria de caminata aleatoria precalibrada para 292 períodos.\n\n\n\n\n\n","category":"constant"},{"location":"#InflationEvalTools.AbstractConfig","page":"Home","title":"InflationEvalTools.AbstractConfig","text":"abstract type AbstractConfig{F <: InflationFunction, R <:ResampleFunction, T <:TrendFunction} end\n\nAbstractConfig es un tipo abstracto para representar variantes de simulación que utilizan, en general, una función de inflación InflationFunction, una función de remuestreo ResampleFunction y una función de Tendencia TrendFunction. Contiene el esquema general de la simulación.\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.AbstractEvalPeriod","page":"Home","title":"InflationEvalTools.AbstractEvalPeriod","text":"abstract type AbstractEvalPeriod\n\nTipo abstracto para representar tipos de períodos de evaluación. \n\nVer también: EvalPeriod, CompletePeriod.\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.AbstractInflationParameter","page":"Home","title":"InflationEvalTools.AbstractInflationParameter","text":"Tipo abstracto para representar los parámetros de inflación \n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.ArrayTrendFunction","page":"Home","title":"InflationEvalTools.ArrayTrendFunction","text":"abstract type ArrayTrendFunction <: TrendFunction end\n\nTipo para función de tendencia que almacena el vector de valores a aplicar a las variaciones intermensuales.\n\nUtilización\n\nfunction (trendfn::ArrayTrendFunction)(base::VarCPIBase{T}, range::UnitRange) where T\n\nEspecifica cómo aplicar la función de tendencia sobre un VarCPIBase con el rango de índices range.\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.CompletePeriod","page":"Home","title":"InflationEvalTools.CompletePeriod","text":"CompletePeriod <: AbstractEvalPeriod\n\nTipo para representar el período completo de evaluación, correspondiente a los períodos de inflación del CountryStructure de datos. El tag por defecto para el período completo es vacío (\"\"), para que las métricas de evaluación en los resultados generados en evalsim no tienen un prefijo, ya que es el período de evaluación principal. Este período se puede brindar a una configuración SimConfig para evaluar sobre todo el rango de fechas de inflación simuladas. \n\nEjemplo\n\nCreamos una instancia de este tipo para representar la evaluación sobre el período completo de las trayectorias de inflación generadas en las simulaciones.\n\njulia> comp = CompletePeriod()\nPeríodo completo\n\nVer también: EvalPeriod, GT_EVAL_B00, GT_EVAL_B10, GT_EVAL_T0010\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.CrossEvalConfig","page":"Home","title":"InflationEvalTools.CrossEvalConfig","text":"CrossEvalConfig{F, R, T} <:AbstractConfig{F, R, T}\nCrossEvalConfig(ensemblefn, resamplefn, trendfn, paramfn, nsim, evalperiods)\n\nCrossEvalConfig es un tipo concreto que contiene la configuración base para generar simulaciones utilizando un conjunto de funciones de inflación a combinarse. \n\nRecibe una\n\nfunción de inflación de conjunto EnsembleFunction, \nuna función de remuestreo ResampleFunction, \nuna función de Tendencia TrendFunction, \nla cantidad de simulaciones a realizar nsim, \nun período (o conjunto de períodos) de evaluación EvalPeriod para en los cuales se obtendrán métricas de evaluación de validación cruzada. El período de entrenamiento se considera desde el inicio de la muestra hasta el período anterior a cada período de evaluación dado.\n\nEjemplo\n\nConsiderando un conjunto de funciones de inflación, remuestreo, tendencia e inflación paramétrica: \n\njulia> ensemblefn = EnsembleFunction(InflationPercentileEq(72), InflationPercentileWeighted(68));\n\njulia> resamplefn = ResampleSBB(36); \n\njulia> trendfn = TrendRandomWalk(); \n\njulia> paramfn = InflationTotalRebaseCPI(60); \n\nGeneramos una configuración del tipo CrossEvalConfig con 10000 simulaciones, configurando dos períodos de evaluación para los métodos de validación cruzada. \n\njulia> config = CrossEvalConfig(ensemblefn, resamplefn, trendfn, paramfn, 10000, \n       (EvalPeriod(Date(2016, 1), Date(2017, 12), \"cv1617\"), \n       EvalPeriod(Date(2017, 1), Date(2018, 12), \"cv1718\")))\nCrossEvalConfig{InflationTotalRebaseCPI, ResampleSBB, TrendRandomWalk{Float32}}\n|─> Función de inflación            : [\"Percentil equiponderado 72.0\", \"Percentil ponderado 68.0\"]\n|─> Función de remuestreo           : Block bootstrap estacionario con bloque esperado 36\n|─> Función de tendencia            : Tendencia de caminata aleatoria\n|─> Método de inflación paramétrica : Variación interanual IPC con cambios de base sintéticos (60, 0)\n|─> Número de simulaciones          : 10000\n|─> Períodos de evaluación          : cv1617:Jan-16-Dec-17 y cv1718:Jan-17-Dec-18\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.EvalPeriod","page":"Home","title":"InflationEvalTools.EvalPeriod","text":"EvalPeriod <: AbstractEvalPeriod\n\nTipo para representar un período de evaluación dado por las fechas startdate y finaldate. Se debe incluir una etiqueta en el campo tag para adjuntar a los resultados generados en evalsim. Este período se puede brindar a una configuración SimConfig para evaluar sobre un rango de fechas determinado. \n\nEjemplo\n\nCreamos un período de evaluación denominado b2010 al generar los resultados. \n\njulia> b2010 = EvalPeriod(Date(2011,1), Date(2019,12), \"b2010\")\nb2010:Jan-11-Dec-19\n\nVer también: GT_EVAL_B00, GT_EVAL_B10, GT_EVAL_T0010\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.InflationParameter","page":"Home","title":"InflationEvalTools.InflationParameter","text":"Tipo concreto para representar un parámetro de inflación computado con la función de inflación inflfn, el método de remuestreo resamplefn y función de tendencia trendfn.\n\nVer también: ParamTotalCPIRebase, ParamTotalCPI, ParamWeightedMean\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.ResampleFunction","page":"Home","title":"InflationEvalTools.ResampleFunction","text":"function (resamplefn::ResampleFunction)(base::VarCPIBase, rng = Random.GLOBAL_RNG)\n\nDefine el comportamiento general de función de remuestreo sobre VarCPIBase.  Este método requiere una implementación específica del método sobre el par (AbstractMatrix, rng).  Considera que el método de remuestreo podría extender los períodos de la serie de tiempo y  ajusta las fechas apropiadamente.\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.ResampleFunction-2","page":"Home","title":"InflationEvalTools.ResampleFunction","text":"function (resamplefn::ResampleFunction)(cs::CountryStructure, rng = Random.GLOBAL_RNG)\n\nDefine el comportamiento general de función de remuestreo sobre CountryStructure.  Se remuestrea cada una de las bases del campo base utilizando el método para objetos VarCPIBase y se devuelve un nuevo CountryStructure.\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.ResampleFunction-3","page":"Home","title":"InflationEvalTools.ResampleFunction","text":"abstract type ResampleFunction <: Function end\n\nTipo abstracto para funciones de remuestreo. Cada función debe extender como  mínimo el método\n\nresamplefn(vmat::AbstractMatrix, rng)::Matrix \n\npara remuestrear un CountryStructure con las funciones definidas arriba. \n\nOpcionalmente, si se desea modificar el comportamiento específico de cada función de remuestreo, se deben extender los siguientes métodos: \n\nfunction (resamplefn::ResampleFunction)(cs::CountryStructure, rng = Random.GLOBAL_RNG)\nfunction (resamplefn::ResampleFunction)(base::VarCPIBase, rng = Random.GLOBAL_RNG)\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.ResampleScrambleVarMonths","page":"Home","title":"InflationEvalTools.ResampleScrambleVarMonths","text":"ResampleScrambleVarMonths <: ResampleFunction\n\nDefine una función de remuestreo para remuestrear las series de tiempo por los mismos meses de ocurrencia. El muestreo se realiza de manera independiente para  serie de tiempo en las columnas de una matriz. \n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.SimConfig","page":"Home","title":"InflationEvalTools.SimConfig","text":"SimConfig{F, R, T} <:AbstractConfig{F, R, T}\n\nTipo concreto que contiene una configuración base para generar simulaciones utilizando todos los datos como set de entrenamiento. Recibe una función de inflación InflationFunction, una función de remuestreo ResampleFunction, una función de Tendencia TrendFunction,  una función de inflación de evaluación [paramfn] y la cantidad de simulaciones  deseadas [nsim].\n\nEjemplo\n\nConsiderando las siguientes instancias de funciones de inflación, remuestreo, tendencia e inflación de evaluación:\n\njulia> percEq = InflationPercentileEq(80);\n\njulia> resamplefn = ResampleSBB(36);\n\njulia> trendfn = TrendRandomWalk();\n\njulia> paramfn = InflationWeightedMean();\n\nGeneramos una configuración del tipo SimConfig con 1000 simulaciones, con períodos de evaluación por defecto:\n\nCompletePeriod(), \nGT_EVAL_B00, \nGT_EVAL_T0010 y  \nGT_EVAL_B10\n\njulia> config = SimConfig(percEq, resamplefn, trendfn, paramfn, 1000, Date(2019,12))\nSimConfig{InflationPercentileEq, ResampleSBB, TrendRandomWalk{Float32}}\n|─> Función de inflación            : Percentil equiponderado 80.0\n|─> Función de remuestreo           : Block bootstrap estacionario con bloque esperado 36\n|─> Función de tendencia            : Tendencia de caminata aleatoria\n|─> Método de inflación paramétrica : Media ponderada interanual\n|─> Número de simulaciones          : 1000\n|─> Fin set de entrenamiento        : Dec-19\n|─> Períodos de evaluación          : Período completo, gt_b00:Dec-01-Dec-10, gt_t0010:Jan-11-Nov-11 y gt_b10:Dec-11-Dec-20\n\nPara generar una configuración con períodos específicos podemos brindar la colección de períodos de interés:\n\njulia> config2 = SimConfig(percEq, resamplefn, trendfn, paramfn, 1000, Date(2019,12),\n       (CompletePeriod(), EvalPeriod(Date(2008,1), Date(2009,12), \"fincrisis\")))\nSimConfig{InflationPercentileEq, ResampleSBB, TrendRandomWalk{Float32}}\n|─> Función de inflación            : Percentil equiponderado 80.0\n|─> Función de remuestreo           : Block bootstrap estacionario con bloque esperado 36\n|─> Función de tendencia            : Tendencia de caminata aleatoria\n|─> Método de inflación paramétrica : Media ponderada interanual\n|─> Número de simulaciones          : 1000\n|─> Fin set de entrenamiento        : Dec-19\n|─> Períodos de evaluación          : Período completo y fincrisis:Jan-08-Dec-09\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.TrendAnalytical","page":"Home","title":"InflationEvalTools.TrendAnalytical","text":"TrendAnalytical{T} <: ArrayTrendFunction\n\nTipo para representar una función de tendencia definida por una función anónima. Recibe los datos de un CountryStructure o un rango de índices para precomputar el vector de tendencia utlizando una función anónima.\n\nEjemplos:\n\nPara crear una función de tendencia a partir de una función anónima: \n\ntrendfn = TrendAnalytical(param_data, t -> 1 + sin(2π*t/12), \"Tendencia sinusoidal\")\n\no bien: \n\ntrendfn = TrendAnalytical(1:periods(param_data), t -> 1 + sin(2π*t/12), \"Tendencia sinusoidal\")\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.TrendExponential","page":"Home","title":"InflationEvalTools.TrendExponential","text":"TrendExponential{T} <: ArrayTrendFunction\n\nTipo concreto para representar una función de tendencia de crecimiento exponencial. \n\nConstructores\n\nfunction TrendExponential(cs::CountryStructure, rate::Real = 0.02f0)\nfunction TrendExponential(range::UnitRange, rate::Real = 0.02f0)\n\nEjemplos:\n\n# Crear una función de tendencia con crecimiento exponencial al 2% anual\ntrendfn = TrendExponential(gtdata, 0.02)\n\nUtilización\n\nfunction (trendfn::TrendExponential)(cs::CountryStructure)\n\nAplicación de tendencia TrendExponential sobre los objetos VarCPIBase que componen el CountryStructure. \n\ntrendfn = TrendExponential(gtdata, 0.02) \ntrended_cs = trendfn(gtdata) \n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.TrendFunction","page":"Home","title":"InflationEvalTools.TrendFunction","text":"abstract type TrendFunction <: Function end\n\nTipo abstracto para manejar las funciones de tendencia.\n\nUtilización\n\nfunction (trendfn::TrendFunction)(cs::CountryStructure)\n\nAplica la función de tendencia sobre un CountryStructure y devuelve un nuevo CountryStructure.\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.TrendIdentity","page":"Home","title":"InflationEvalTools.TrendIdentity","text":"TrendIdentity <: TrendFunction\n\nTipo concreto para representar una función de tendencia neutra. Es decir, esta función de tendencia mantiene los datos sin alteración. \n\nEjemplos:\n\n# Crear una función de tendencia neutra. \ntrendfn = TrendIdentity()\n\nUtilización\n\nfunction (trendfn::TrendIdentity)(cs::CountryStructure)\n\nAplicación de tendencia TrendIdentity sobre VarCPIBase. Se redefine este método para dejar invariante la base VarCPIBase. \n\ntrendfn = TrendIdentity() \ntrended_cs = trendfn(gtdata) \n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.TrendRandomWalk","page":"Home","title":"InflationEvalTools.TrendRandomWalk","text":"TrendRandomWalk{T} <: ArrayTrendFunction\n\nTipo para representar una función de tendencia de caminata aleatoria. Utiliza el vector de caminata aleatoria precalibrado en RWTREND.\n\nEjemplo:\n\n# Crear la función de tendencia de caminata aleatoria\ntrendfn = TrendRandomWalk()\n\n\n\n\n\n","category":"type"},{"location":"#InflationEvalTools.DEFAULT_RESAMPLE_FN","page":"Home","title":"InflationEvalTools.DEFAULT_RESAMPLE_FN","text":"DEFAULT_RESAMPLE_FN\n\nDefine la funcón de remuestreo a utilizar por defecto en el ejercicio de simulación.\n\n\n\n\n\n","category":"function"},{"location":"#InflationEvalTools.DEFAULT_TREND_FN","page":"Home","title":"InflationEvalTools.DEFAULT_TREND_FN","text":"DEFAULT_TREND_FN\n\nDefine la funcón de tendencia a utilizar por defecto en el ejercicio de simulación.\n\n\n\n\n\n","category":"function"},{"location":"#InflationEvalTools.ParamTotalCPI-Tuple{}","page":"Home","title":"InflationEvalTools.ParamTotalCPI","text":"ParamTotalCPI()\n\nFunción de ayuda para obtener la configuración del parámetro de inflación dado por la función de inflación del IPC, y el método de remuestreo y función de tendencia por defecto.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.ParamTotalCPILegacyRebase-Tuple{}","page":"Home","title":"InflationEvalTools.ParamTotalCPILegacyRebase","text":"ParamTotalCPILegacyRebase()\n\nFunción de ayuda para obtener la configuración del parámetro de inflación dado por la función de inflación del IPC con cambio de base sintético, y el método de remuestreo y función de tendencia por defecto.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.ParamTotalCPIRebase-Tuple{}","page":"Home","title":"InflationEvalTools.ParamTotalCPIRebase","text":"ParamTotalCPIRebase()\n\nFunción de ayuda para obtener la configuración del parámetro de inflación dado por la función de inflación del IPC con cambio de base sintético, y el método de remuestreo y función de tendencia por defecto.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.ParamWeightedMean-Tuple{}","page":"Home","title":"InflationEvalTools.ParamWeightedMean","text":"ParamWeightedMean()\n\nFunción de ayuda para obtener la configuración del parámetro de inflación dado por la media ponderada interanual y el método de remuestreo por defecto.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.absme_combination_weights-Union{Tuple{F}, Tuple{AbstractArray{F, 3}, Any}} where F","page":"Home","title":"InflationEvalTools.absme_combination_weights","text":"absme_combination_weights(tray_infl::AbstractArray{F, 3}, tray_infl_param; \n    restrict_all::Bool = true, \n    show_status::Bool = false) where F -> Vector{F}\n\nObtiene ponderadores no negativos, cuya suma es igual a 1, para el problema de combinación lineal que minimiza el valor absoluto de error medio. Estos ponderadores se pueden interpretar como participaciones en la combinación lineal. \n\nLos parámetros opcionales son: \n\nshow_status::Bool = false: mostrar estado del proceso de optimización con Ipopt y JuMP. \nrestrict_all::Bool = true: indica si aplicar la restricción de la suma de ponderadores a todas las entradas del vector de ponderaciones. Si es false, se aplica la restricción a partir de la segunda entrada. Esto es para que si el primer ponderador corresponde a un término constante, este no sea restringido. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.add_ones-Tuple{Any}","page":"Home","title":"InflationEvalTools.add_ones","text":"add_ones(tray_infl) -> Array{<:AbstractFloat, 3}\n\nAgrega intercepto al cubo de trayectorias en la primera columna. Si las dimensiones de entrada de tray_infl son (T, n, K), esta función devuelve un arreglo con dimensiones (T+1, n, K).\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.average_mats-Tuple{Any, Any}","page":"Home","title":"InflationEvalTools.average_mats","text":"average_mats(tray_infl, tray_infl_param) -> (Matrix{<:AbstractFloat}, Vector{<:AbstractFloat})\n\nObtiene las matrices XᵀX y Xᵀπ para el problema de minimización del error cuadrático medio. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.combination_metrics-Tuple{Any, Any, Any}","page":"Home","title":"InflationEvalTools.combination_metrics","text":"combination_metrics(tray_infl, tray_infl_param, w; kwargs...)\n\nMétricas para medidas de combinación lineal. Se combinan las trayectorias en tray_infl con las ponderaciones w y se computan las métricas de evaluación utilizando la trayectoria paramétrica tray_infl_param. \n\nLos argumentos opcionales (kwargs...) son pasados a la función eval_metrics.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.combination_weights-Tuple{Any, Any}","page":"Home","title":"InflationEvalTools.combination_weights","text":"combination_weights(tray_infl, tray_infl_param) -> Vector{<:AbstractFloat}\n\nObtiene los ponderadores óptimos de la solución analítica al problema de minimización del error cuadrático medio de la combinación lineal de estiamadores de inflación en tray_infl utilizando la trayectoria de inflación paramétrica tray_infl_param. \n\nDevuelve un vector con los ponderadores asociados a cada estimador en las columnas de tray_infl.\n\nVer también: ridge_combination_weights, lasso_combination_weights, share_combination_weights, elastic_combination_weights. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.crossvalidate","page":"Home","title":"InflationEvalTools.crossvalidate","text":"crossvalidate(\n    weightsfunction::Function,\n    crossvaldata::Dict{String}, \n    config::CrossEvalConfig = crossvaldata[\"config\"];\n    show_status::Bool = true,\n    print_weights::Bool = true, \n    return_weights::Bool = false,\n    metrics::Vector{Symbol} = [:mse], \n    train_start_date::Date = Date(2000, 12), \n    components_mask = Colon(), \n    add_intercept::Bool = false) -> (cv_results::Matrix [, weights::Vector])\n\nLleva a cabo un proceso de combinación lineal de medidas de inflación y evaluación de validación sobre subperíodos futuros. Las medidas de inflación a combinarse son generadas con la configuración config de tipo CrossEvalConfig, así como los parámetros de simulación y los períodos de evaluación.\n\nEl diccionario crossvaldata contiene las trayectorias de inflación, la trayectoria paramétrica y las fechas de cada período de combinación y evaluación. El diccionario crossvaldata es producido por makesim para un CrossEvalConfig. Se hace de esta forma para que las trayectorias de inflación estén precomputadas, ya que sería muy costoso generarlas al vuelo. \n\nLa función weightsfunction recibe una tupla (tray_infl, tray_param) y obtiene ponderaciones de combinación para las medidas en tray_infl. Por ejemplo, se puede utilizar directamente la función combination_weights, o una función anónima construida con ridge_combination_weights o lasso_combination_weights.\n\nLos parámetros opcionales son:  \n\nshow_status::Bool = true: muestra información sobre cada período de ajuste de ponderadores (subperíodo de entrenamiento) y resultados de las métricas en los subperíodos de validación.\nprint_weights::Bool = true: indica si se deben imprimir los vectores de ponderaciones obtenidos en cada iteración de entrenamiento y evaluación.\nreturn_weights::Bool = false: indica si se devuelve el vector de ponderación del último período.\nmetrics::Vector{Symbol} = [:mse]: vector de métricas a reportar en cada iteración de entrenamiento y evaluación. Las métricas son obtenidas por eval_metrics.\ntrain_start_date::Date = Date(2000, 12): fecha de inicio para el subperíodo de los datos de entrenamiento sobre el cual se obtienen los ponderadores de combinación.\ncomponents_mask = (:): máscara a aplicar sobre las columnas de tray_infl en la combinación y evaluación. Utilizado para excluir una o más medidas del proceso de ajustes de ponderadores y evaluación fuera de muestra.\nadd_intercept::Bool = false: indica si se debe agregar una columna de unos en las trayectorias de inflación a combinar. Si el ensemblefn de config contiene una InflationConstant como primera entrada, este argumento no es necesario. Utilizado para obtener un intercepto en la combinación lineal de trayectorias de inflación y que los ponderadores obtenidos de la combinación representen variaciones alrededor de este intercepto.\n\n\n\n\n\n","category":"function"},{"location":"#InflationEvalTools.dict_config-Tuple{Dict}","page":"Home","title":"InflationEvalTools.dict_config","text":"dict_config(params::Dict)\n\nFunción para convertir diccionario de parámetros a SimConfig o CrossEvalConfig.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.elastic_combination_weights-Union{Tuple{F}, Tuple{AbstractArray{F, 3}, Any, Any, Any}} where F","page":"Home","title":"InflationEvalTools.elastic_combination_weights","text":"elastic_combination_weights(tray_infl, tray_infl_param, lambda, gamma; \n    max_iterations::Int = 1000, \n    alpha = 0.001, \n    tol = 1e-4, \n    show_status = true, \n    return_cost = false, \n    penalize_all = true) -> Vector{<:AbstractFloat}\n\nObtiene ponderadores óptimos de Elastic Net a través de una aproximación iterativa al problema de minimización del error cuadrático medio de la combinación lineal de estimadores de inflación en tray_infl utilizando la trayectoria de inflación paramétrica tray_infl_param, regularizada con la norma L1 y L2 de los ponderadores, ponderada por el parámetro lambda. El porcentaje de regularización de la norma L1 se controla con el parámetro gamma.\n\nLos parámetros opcionales son: \n\nmax_iterations::Int = 1000: número máximo de iteraciones. \nalpha::AbstractFloat = 0.001: parámetro de aproximación o avance del algoritmo de gradiente próximo. \ntol::AbstractFloat = 1e-4: desviación absoluta de la función de costo. Si la función de costo varía en términos absolutos menos que tol de una iteración a otra, el algoritmo de gradiente se detiene. \nshow_status::Bool = true: mostrar estado del algoritmo iterativo.\nreturn_cost::Bool = false: indica si devuelve el vector de historia de la función de costo de entrenamiento. \npenalize_all::Bool = true: indica si aplicar la regularización a todos los ponderadores. Si es falso, se aplica la regularización a partir del segundo al último componente del vector de ponderaciones.\n\nDevuelve un vector con los ponderadores asociados a cada estimador en las columnas de tray_infl.\n\nVer también: combination_weights, ridge_combination_weights, share_combination_weights, lasso_combination_weights.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_absme_online-Tuple{CPIDataBase.InflationFunction, InflationEvalTools.ResampleFunction, InflationEvalTools.TrendFunction, CPIDataBase.CountryStructure, Vector{<:AbstractFloat}}","page":"Home","title":"InflationEvalTools.eval_absme_online","text":"eval_absme_online(\n    inflfn::InflationFunction,\n    resamplefn::ResampleFunction, \n    trendfn::TrendFunction,\n    csdata::CountryStructure, \n    tray_infl_param::Vector{<:AbstractFloat}; \n    K = 1000, rndseed = DEFAULT_SEED) -> absme\n\nFunción para obtener evaluación de valor absoluto de error medio (ABSME) utilizando la configuración especificada. Se requiere la trayectoria paramétrica tray_infl_param para evitar su cómputo repetidamente en esta función. Devuelve el ABSME como un escalar.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_absme_online-Tuple{SimConfig, CPIDataBase.CountryStructure}","page":"Home","title":"InflationEvalTools.eval_absme_online","text":"eval_absme_online(config::SimConfig, csdata::CountryStructure; \n    K = 1000, \n    rndseed = DEFAULT_SEED) -> absme\n\nFunción para obtener evaluación del valor absoluto de error medio utilizando configuración de evaluación SimConfig. Se deben proveer los datos de evaluación en csdata, con los cuales se desee computar la trayectoria paramétrica de comparación. Devuelve la métrica de valor absoluto como un escalar.\n\nEsta función se puede utilizar para optimizar los parámetros de diferentes medidas de inflación y es más eficiente en memoria que pargentrayinfl. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_corr_online-Tuple{CPIDataBase.InflationFunction, InflationEvalTools.ResampleFunction, InflationEvalTools.TrendFunction, CPIDataBase.CountryStructure, Vector{<:AbstractFloat}}","page":"Home","title":"InflationEvalTools.eval_corr_online","text":"eval_corr_online(\n    inflfn::InflationFunction,\n    resamplefn::ResampleFunction, \n    trendfn::TrendFunction,\n    csdata::CountryStructure, \n    tray_infl_param::Vector{<:AbstractFloat};\n    K = 1000, rndseed = DEFAULT_SEED) -> corr\n\nFunción para obtener evaluación de correlación media (corr) utilizando la configuración especificada. Se requiere la trayectoria paramétrica tray_infl_param para evitar su cómputo repetidamente en esta función. Devuelve la correlación media (corr) como un escalar.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_corr_online-Tuple{SimConfig, CPIDataBase.CountryStructure}","page":"Home","title":"InflationEvalTools.eval_corr_online","text":"eval_corr_online(config::SimConfig, csdata::CountryStructure;\n    K = 1000, \n    rndseed = DEFAULT_SEED) -> corr\n\nFunción para obtener evaluación de correlación media (corr) utilizando configuración de evaluación SimConfig. Se deben proveer los datos de evaluación en csdata, con los cuales se desee computar la trayectoria paramétrica de comparación. Devuelve la correlación media (corr) como un escalar.\n\nEsta función se puede utilizar para optimizar los parámetros de diferentes medidas de inflación y es más eficiente en memoria que pargentrayinfl. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_metrics-Tuple{Any, Any}","page":"Home","title":"InflationEvalTools.eval_metrics","text":"eval_metrics(tray_infl, tray_infl_pob; short=false) -> Dict\n\nFunción para obtener un diccionario con estadísticos de evaluación de las realizaciones de las medidas de inflación en tray_infl utilizando el parámetro tray_infl_pob. \n\nSi short=true, devuelve un diccionario únicamente con el error cuadrático medio (MSE) de evaluación. Útil para realizar optimización iterativa en la búsqueda de parámetros. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_mse_online-Tuple{CPIDataBase.InflationFunction, InflationEvalTools.ResampleFunction, InflationEvalTools.TrendFunction, CPIDataBase.CountryStructure, Vector{<:AbstractFloat}}","page":"Home","title":"InflationEvalTools.eval_mse_online","text":"eval_mse_online(\n    inflfn::InflationFunction,\n    resamplefn::ResampleFunction, \n    trendfn::TrendFunction,\n    csdata::CountryStructure, \n    tray_infl_param::Vector{<:AbstractFloat}; \n    K = 1000, rndseed = DEFAULT_SEED) -> mse\n\nFunción para obtener evaluación de error cuadrático medio (MSE) utilizando la configuración especificada. Se requiere la trayectoria paramétrica tray_infl_param para evitar su cómputo repetidamente en esta función. Devuelve el MSE como un escalar.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_mse_online-Tuple{SimConfig, CPIDataBase.CountryStructure}","page":"Home","title":"InflationEvalTools.eval_mse_online","text":"eval_mse_online(config::SimConfig, csdata::CountryStructure; \n    K = 1000, \n    rndseed = DEFAULT_SEED) -> mse\n\nFunción para obtener evaluación de error cuadrático medio utilizando configuración de evaluación SimConfig. Se deben proveer los datos de evaluación en csdata, con los cuales se desee computar la trayectoria paramétrica de comparación. Devuelve el MSE como un escalar.\n\nEsta función se puede utilizar para optimizar los parámetros de diferentes medidas de inflación y es más eficiente en memoria que pargentrayinfl. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.eval_periods","page":"Home","title":"InflationEvalTools.eval_periods","text":"eval_periods(cs::CountryStructure, period::EvalPeriod) -> BitVector\neval_periods(cs::CountryStructure, ::CompletePeriod) -> UnitRange\n\nDevuelve una máscara o un rango de índices de los períodos comprendidos en EvalPeriod o CompletePeriod para aplicar slicing a las trayectorias de inflación y al parámetro antes de obtener las métricas de evaluación.\n\nVer también: EvalPeriod, CompletePeriod, period_tag.\n\n\n\n\n\n","category":"function"},{"location":"#InflationEvalTools.evalsim-Tuple{CPIDataBase.CountryStructure, SimConfig}","page":"Home","title":"InflationEvalTools.evalsim","text":"evalsim(data::CountryStructure, config::SimConfig; \n    rndseed = DEFAULT_SEED, \n    short = false) -> (Dict, Array{<:AbstractFloat, 3})\n\nEsta función genera la trayectoria paramétrica, las trayectorias de simulación y las métricas de evaluación utilizando la configuración SimConfig. Devuelve (metrics, tray_infl).\n\nLas métricas de evaluación se devuelven en el diccionario metrics. Si short=true, el diccionario contiene únicamente la llave :mse. Este diccionario corto es útil para optimización iterativa. Por defecto, se computa el diccionario completo de métricas, pero este proceso es más intensivo en memoria. Ver también eval_metrics.\n\nLas trayectorias de inflación simuladas son devueltas en tray_infl como un arreglo tridimensional de dimensión (T, 1, K), en donde T corresponde a los períodos de inflación computados y K representa el número de realizaciones de la simulación. La dimensión unitaria 1 sirve para concatenar posteriormente los resultados de simulación. Por ejemplo, en el cómputo de una medida de promedio ponderado óptima. \n\nUtilización\n\nLa función evalsim recibe un CountryStructure y un AbstractConfig del tipo SimConfig.\n\nEjemplo\n\nTeniendo una configuración de tipo SimConfig y un conjunto de datos gtdata_eval\n\njulia> config = SimConfig(\n        InflationPercentileEq(69),\n        ResampleScrambleVarMonths(),\n        TrendRandomWalk(),\n        InflationTotalRebaseCPI(36, 2), 10_000, Date(2019,12))\nSimConfig{InflationPercentileEq, ResampleScrambleVarMonths, TrendRandomWalk{Float32}}\n|─> Función de inflación            : Percentil equiponderado 69.0\n|─> Función de remuestreo           : Bootstrap IID por meses de ocurrencia\n|─> Función de tendencia            : Tendencia de caminata aleatoria\n|─> Método de inflación paramétrica : Variación interanual IPC con cambios de base sintéticos (36, 2)\n|─> Número de simulaciones          : 10000\n|─> Fin set de entrenamiento        : Dec-19\n|─> Períodos de evaluación          : Período completo, gt_b00:Dec-01-Dec-10, gt_t0010:Jan-11-Nov-11 y gt_b10:Dec-11-Dec-20\n\npodemos ejecutar una simulación con los parámetros de config con: \n\njulia> results, tray_infl = evalsim(gtdata, config)\n┌ Info: Evaluación de medida de inflación\n│   medida = \"Percentil equiponderado 69.0\"\n│   remuestreo = \"Bootstrap IID por meses de ocurrencia\"\n│   tendencia = \"Tendencia de caminata aleatoria\"\n│   evaluación = \"Variación interanual IPC con cambios de base sintéticos (36, 2)\"\n│   simulaciones = 10000\n│   traindate = 2019-12-01\n└   periodos = (Período completo, gt_b00:Dec-01-Dec-10, gt_t0010:Jan-11-Nov-11, gt_b10:Dec-11-Dec-20)\n... (barra de progreso)\n┌ Info: Métricas de evaluación:\n│   mse = ...\n└   ... (otras métricas)\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.gentrayinfl-Union{Tuple{T}, Tuple{R}, Tuple{F}, Tuple{F, R, T, CPIDataBase.CountryStructure}} where {F<:CPIDataBase.InflationFunction, R<:InflationEvalTools.ResampleFunction, T<:InflationEvalTools.TrendFunction}","page":"Home","title":"InflationEvalTools.gentrayinfl","text":"gentrayinfl(inflfn::F, resamplefn::R, trendfn::T, csdata::CountryStructure; \n    K = 100, \n    rndseed = DEFAULT_SEED, \n    showprogress = true)\n\nComputa K trayectorias de inflación utilizando la función de inflación inflfn::InflationFunction, la función de remuestreo resamplefn::TrendFunction y la función de tendencia trendfn::TrendFunction especificada. Se utilizan los datos en el CountryStructure dado en csdata.\n\nA diferencia de la función pargentrayinfl, esta función no realiza el cómputo de forma  distribuida. \n\nPara lograr la reproducibilidad entre diferentes corridas de la función, y de esta forma, generar trayectorias de inflación con diferentes metodologías utilizando los mismos remuestreos, se fija la semilla de generación de acuerdo con el número de iteración en la simulación. Para controlar el inicio de la generación de trayectorias se utiliza como parámetro de desplazamiento el valor rndseed, cuyo valor por defecto es la semilla DEFAULT_SEED. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.get_param_function-Tuple{InflationEvalTools.ResampleFunction}","page":"Home","title":"InflationEvalTools.get_param_function","text":"get_param_function(::ResampleFunction)\n\nCada función de remuestreo debe realizar la implementación de una función para obtener un CountryStructure con objetos VarCPIBase que contengan las variaciones intermensuales promedio (o paramétricas) que permitan construir la trayectoria paramétrica de inflación de acuerdo con el método de remuestreo dado en ResampleFunction.\n\nEsta función devuelve la función de obtención de datos paramétricos. \n\nEjemplo\n\n# Obtener la función de remuestreo \nresamplefn = ResampleSBB(36)\n...\n\n# Obtener su función para obtener los datos paramétricos \nparamdatafn = get_param_function(resamplefn)\n# Obtener CountryStructure de datos paramétricos \nparamdata = paramdatafn(gtdata)\n\nVer también: param_sbb\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.get_ranges-Tuple{CPIDataBase.CountryStructure}","page":"Home","title":"InflationEvalTools.get_ranges","text":"get_ranges(cs::CountryStructure)\n\nFunción de ayuda para obtener tupla de rangos de índices para hacer slicing de los vectores de tendencia.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.lasso_combination_weights-Union{Tuple{F}, Tuple{AbstractArray{F, 3}, Any, Any}} where F","page":"Home","title":"InflationEvalTools.lasso_combination_weights","text":"lasso_combination_weights(tray_infl, tray_infl_param, lambda; \n    max_iterations::Int = 1000, \n    alpha = F(0.005), \n    tol = F(1e-4), \n    show_status = true, \n    return_cost = false, \n    penalize_all = true) -> Vector{<:AbstractFloat}\n\nObtiene ponderadores óptimos de LASSO a través de una aproximación iterativa al problema de minimización del error cuadrático medio de la combinación lineal de estimadores de inflación en tray_infl utilizando la trayectoria de inflación paramétrica tray_infl_param, regularizada con la norma L1 de los ponderadores, ponderada por el parámetro lambda.\n\nLos parámetros opcionales son: \n\nmax_iterations::Int = 1000: número máximo de iteraciones. \nalpha::AbstractFloat = 0.001: parámetro de aproximación o avance del algoritmo de gradiente próximo. \ntol::AbstractFloat = 1e-4: desviación absoluta de la función de costo. Si la función de costo varía en términos absolutos menos que tol de una iteración a otra, el algoritmo de gradiente se detiene. \nshow_status::Bool = true: mostrar estado del algoritmo iterativo.\nreturn_cost::Bool = false: indica si devuelve el vector de historia de la función de costo de entrenamiento. \npenalize_all::Bool = true: indica si aplicar la regularización a todos los ponderadores. Si es falso, se aplica la regularización a partir del segundo al último componente del vector de ponderaciones.\n\nDevuelve un vector con los ponderadores asociados a cada estimador en las columnas de tray_infl.\n\nVer también: combination_weights, ridge_combination_weights, share_combination_weights, elastic_combination_weights.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.makesim-Tuple{CPIDataBase.CountryStructure, SimConfig}","page":"Home","title":"InflationEvalTools.makesim","text":"makesim(data, config::AbstractConfig; \n    rndseed = DEFAULT_SEED\n    short = false) -> (Dict, Array{<:AbstractFloat, 3})\n\nUtilización\n\nEsta función utiliza la función evalsim para generar un set de simulaciones en base a un CountryStructure y un AbstractConfig, y genera un diccionario results con todas las métricas de evaluación y con la información del AbstractConfig utilizado para generarlas. Adicionalmente genera un objeto con las trayectorias de inflación. Devuelve (metrics, tray_infl).\n\nEjemplos\n\nmakesim recibe un CountryStructure y un AbstractConfig, para trasladarlo a evalsim y generar las simulaciones. Almacena las métricas y los parámetros de simulación en el diccionario results, y Adicionalmente devuelve las trayectoria de simulacion.\n\njulia> results, tray_infl = makesim(gtdata, config)\n┌ Info: Evaluación de medida de inflación\n│   medida = \"Percentil equiponderado 69.0\"\n│   remuestreo = \"Bootstrap IID por meses de ocurrencia\"\n│   tendencia = \"Tendencia de caminata aleatoria\"\n│   evaluación = \"Variación interanual IPC con cambios de base sintéticos (36, 2)\"\n│   simulaciones = 10000\n│   traindate = 2019-12-01\n└   periodos = (Período completo, gt_b00:Dec-01-Dec-10, gt_t0010:Jan-11-Nov-11, gt_b10:Dec-11-Dec-20)\n... (barra de progreso)\n┌ Info: Métricas de evaluación:\n│   mse = ...\n└   ... (otras métricas)\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.method_name-Tuple{InflationEvalTools.ResampleFunction}","page":"Home","title":"InflationEvalTools.method_name","text":"method_name(resamplefn::ResampleFunction)\n\nFunción para obtener el nombre del método de remuestreo.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.method_name-Tuple{InflationEvalTools.TrendFunction}","page":"Home","title":"InflationEvalTools.method_name","text":"method_name(resamplefn::TrendFunction)\n\nFunción para obtener el nombre de la función de tendencia.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.method_tag-Tuple{InflationEvalTools.ResampleFunction}","page":"Home","title":"InflationEvalTools.method_tag","text":"method_tag(resamplefn::ResampleFunction)\n\nFunción para obtener una etiqueta del método de remuestreo.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.method_tag-Tuple{InflationEvalTools.TrendFunction}","page":"Home","title":"InflationEvalTools.method_tag","text":"method_tag(trendfn::TrendFunction)\n\nFunción para obtener una etiqueta de la función de tendencia.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.metric_combination_weights-Union{Tuple{F}, Tuple{AbstractArray{F, 3}, Any}} where F","page":"Home","title":"InflationEvalTools.metric_combination_weights","text":"metric_combination_weights(tray_infl::AbstractArray{F, 3}, tray_infl_param; \n    metric::Symbol = :corr, \n    w_start = nothing, \n    x_abstol::AbstractFloat = 1f-2, \n    f_abstol::AbstractFloat = 1f-4, \n    max_iterations::Int = 1000) where F\n\nObtiene ponderadores óptimos de combinación para la métrica metric a través de una aproximación iterativa al problema de optimización de dicha métrica de la combinación lineal de estimadores de inflación en tray_infl utilizando la trayectoria de inflación paramétrica tray_infl_param.\n\nLos parámetros opcionales son: \n\nmetric::Symbol = :corr: métrica a optimizar. Si se trata de la correlación lineal, la métrica es maximizada. El resto de métricas son minimizadas. Véase también eval_metrics.\nw_start = nothing: ponderadores iniciales de búsqueda. Típicamente, un vector de valores flotantes.\nx_abstol::AbstractFloat = 1f-2: desviación absoluta máxima de los ponderadores. \nf_abstol::AbstractFloat = 1f-4: desviación absoluta máxima en la función de costo.\nsum_abstol::AbstractFloat = 1f-2: desviación absoluta permisible máxima en la suma de ponderadores, respecto de la unidad.\nmax_iterations::Int = 1000: número máximo de iteraciones. \n\nDevuelve un vector con los ponderadores asociados a cada estimador en las columnas de tray_infl.\n\nVer también: combination_weights, ridge_combination_weights, share_combination_weights, elastic_combination_weights.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.param_gsbb_mod-Tuple{CPIDataBase.CountryStructure}","page":"Home","title":"InflationEvalTools.param_gsbb_mod","text":"param_gsbb_mod(cs::CountryStructure)\n\nObtiene un CountryStructure paramétrico. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.param_gsbb_mod-Tuple{CPIDataBase.VarCPIBase}","page":"Home","title":"InflationEvalTools.param_gsbb_mod","text":"param_gsbb_mod(base::VarCPIBase)\n\nObtiene la matriz de variaciones intermensuales paramétricas para la metodología de remuestreo de Generalized Seasonal Block Bootstrap modificada que extiende las observaciones a 300 períodos. Devuelve una base de tipo VarCPIBase con las variaciones intermensuales paramétricas. Actualmente funciona solamente si base tiene 120 observaciones.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.param_sbb-Tuple{CPIDataBase.CountryStructure}","page":"Home","title":"InflationEvalTools.param_sbb","text":"param_sbb(cs::CountryStructure)\n\nObtiene un CountryStructure paramétrico.  Véase también param_sbb.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.param_sbb-Tuple{CPIDataBase.VarCPIBase}","page":"Home","title":"InflationEvalTools.param_sbb","text":"param_sbb(base::VarCPIBase)\n\nObtiene la matriz de variaciones intermensuales paramétricas para la metodología de remuestreo de Stationary Block Bootstrap. Devuelve una base de tipo VarCPIBase con las variaciones intermensuales promedio de los mismos meses de ocurrencia (también llamadas variaciones intermensuales paramétricas). \n\nEsta definición también aplica a otras metodologías que utilicen como variaciones  intermensuales paramétricas los promedios en los mismos meses de ocurrencia. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.pargentrayinfl-Union{Tuple{T}, Tuple{R}, Tuple{F}, Tuple{F, R, T, CPIDataBase.CountryStructure}} where {F<:CPIDataBase.InflationFunction, R<:InflationEvalTools.ResampleFunction, T<:InflationEvalTools.TrendFunction}","page":"Home","title":"InflationEvalTools.pargentrayinfl","text":"pargentrayinfl(inflfn::F, resamplefn::R, trendfn::T, csdata::CountryStructure; \n    K = 100, \n    rndseed = DEFAULT_SEED, \n    showprogress = true)\n\nComputa K trayectorias de inflación utilizando la función de inflación inflfn::InflationFunction, la función de remuestreo resamplefn::TrendFunction y la función de tendencia trendfn::TrendFunction especificada. Se utilizan los datos en el CountryStructure dado en csdata.\n\nA diferencia de la función gentrayinfl, esta función implementa el cómputo distribuido en procesos utilizando @distributed. Esto requiere que el paquete haya sido cargado en todos los procesos de cómputo. Por ejemplo: \n\nusing Distributed\naddprocs(4, exeflags=\"--project\")\n@everywhere using HEMI \n\nPara lograr la reproducibilidad entre diferentes corridas de la función, y de esta forma, generar trayectorias de inflación con diferentes metodologías utilizando los mismos remuestreos, se fija la semilla de generación de acuerdo con el número de iteración en la simulación. Para controlar el inicio de la generación de trayectorias se utiliza como parámetro de desplazamiento el valor rndseed, cuyo valor por defecto es la semilla DEFAULT_SEED. \n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.period_tag-Tuple{EvalPeriod}","page":"Home","title":"InflationEvalTools.period_tag","text":"period_tag(period::EvalPeriod) -> String\nperiod_tag(::CompletePeriod) -> String\n\nFunción para obtener etiqueta asociada al período de evaluación. El período de evaluación completo tiene una etiqueta vacía (\"\"). \n\nVer también: EvalPeriod, CompletePeriod, eval_periods.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.ridge_combination_weights-Union{Tuple{F}, Tuple{AbstractArray{F, 3}, Any, Any}} where F","page":"Home","title":"InflationEvalTools.ridge_combination_weights","text":"ridge_combination_weights(tray_infl, tray_infl_param, lambda; \n    penalize_all = true) -> Vector{<:AbstractFloat}\n\nObtiene ponderadores óptimos de Ridge a través de la solución analítica al problema de minimización del error cuadrático medio de la combinación lineal de estimadores de inflación en tray_infl utilizando la trayectoria de inflación paramétrica tray_infl_param, regularizada con la norma L2 de los ponderadores, ponderada por el parámetro lambda.\n\nDevuelve un vector con los ponderadores asociados a cada estimador en las columnas de tray_infl.\n\nLos parámetros opcionales son:  \n\npenalize_all (Bool): indica si aplicar la regularización a todos los ponderadores. Si es falso, se aplica la regularización a partir del segundo al último componente del vector de ponderaciones. Por defecto es true.\n\nVer también: combination_weights, lasso_combination_weights, share_combination_weights, elastic_combination_weights.\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.run_batch-Tuple{Any, Any, Any}","page":"Home","title":"InflationEvalTools.run_batch","text":"run_batch(data, dict_list_params, savepath; \n    savetrajectories = true, \n    rndseed = DEFAULT_SEED)\n\nLa función run_batch genera paquetes de simulaciones con base en el diccionario de parámetros de configuración.\n\nUtilización\n\nLa función recibe un CountryStructure, un diccionario con vectores que contienen parámetros de simulación y un directorio para almacenar archivos con las métricas de cada una de las evaluaciones generadas.\n\nEjemplo\n\nGeneramos un diccionario con parámetros de configuración para percentiles equiponderados, desde el percentil 60 hasta el percentil 80. Esto genera un diccionario con 21 configuraciones distintas para evaluación.\n\nconfig_dict = Dict(\n    :inflfn => InflationPercentileWeighted.(50:80), \n    :resamplefn => resamplefn, \n    :trendfn => trendfn,\n    :paramfn => paramfn, \n    :traindate => Date(2019, 12),\n    :nsim => 1000) |> dict_list`\n\nUna vez creado config_dict, podemos generar el paquete de simulación utilizando run_batch.\n\njulia> run_batch(gtdata_eval, config_dict, savepath)\n... (progreso de evaluación)\n\nUna vez generadas todas las simulaciones podemos obtener los datos mediante la función collect_results. Esta función lee los resultados desde savepath y los presenta en un DataFrame.\n\njulia> df = collect_results(savepath)\n[ Info: Scanning folder `<savepath>` for result files.\n[ Info: Added 31 entries.\n...\n\n\n\n\n\n","category":"method"},{"location":"#InflationEvalTools.share_combination_weights-Union{Tuple{F}, Tuple{AbstractArray{F, 3}, Any}} where F","page":"Home","title":"InflationEvalTools.share_combination_weights","text":"function share_combination_weights(tray_infl::AbstractArray{F, 3}, tray_infl_param; \n    restrict_all::Bool = true, \n    show_status::Bool = false) where F -> Vector{F}\n\nObtiene ponderadores no negativos, cuya suma es igual a 1. Estos ponderadores se pueden interpretar como participaciones en la combinación lineal. \n\nLos parámetros opcionales son: \n\nshow_status::Bool = false: mostrar estado del proceso de optimización con Ipopt y JuMP. \nrestrict_all::Bool = true: indica si aplicar la restricción de la suma de ponderadores a todas las entradas del vector de ponderaciones. Si es false, se aplica la restricción a partir de la segunda entrada. Esto es para que si el primer ponderador corresponde a un término constante, este no sea restringido. \n\n\n\n\n\n","category":"method"}]
}
